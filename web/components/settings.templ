package components

import (
	"github.com/reaper47/recipya/internal/templates"
)

templ Settings(data templates.Data) {
	if data.IsHxRequest {
		<title hx-swap-oob="true">Settings | Recipya</title>
		@settings(data)
	} else {
		@layoutMain("Settings", data) {
			@settings(data)
		}
	}
}

templ settings(data templates.Data) {
	<div
		class="grid place-content-center md:place-content-stretch md:grid-flow-col md:h-full"
		style="grid-template-columns: min-content"
	>
		<div
			class="hidden md:grid text-sm md:text-base bg-gray-200 max-w-[6rem] mt-[1px] dark:bg-gray-600 dark:border-r dark:border-r-gray-500"
			role="tablist"
		>
			if !data.IsAutologin {
				<button
					class="px-2 bg-gray-300 hover:bg-gray-300 dark:bg-gray-800 dark:hover:bg-gray-800"
					hx-get="/settings/tabs/profile"
					hx-target="#settings-tab-content"
					role="tab"
					aria-selected="false"
					aria-controls="tab-content"
					_="on click remove .bg-gray-300 .dark:bg-gray-800 from <div[role='tablist'] button/> then add .bg-gray-300 .dark:bg-gray-800"
				>
					Profile
				</button>
			}
			<button
				class={ "px-2 hover:bg-gray-300 dark:hover:bg-gray-800", templ.KV("bg-gray-300 dark:bg-gray-800", data.IsAutologin) }
				hx-get="/settings/tabs/recipes"
				hx-target="#settings-tab-content"
				role="tab"
				aria-selected="false"
				aria-controls="tab-content"
				_="on click remove .bg-gray-300 .dark:bg-gray-800 from <div[role='tablist'] button/> then add .bg-gray-300 .dark:bg-gray-800"
			>
				Recipes
			</button>
			<button
				class="px-2 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-800"
				hx-get="/settings/tabs/advanced"
				hx-target="#settings-tab-content"
				role="tab"
				aria-selected="false"
				aria-controls="tab-content"
				_="on click remove .bg-gray-300 .dark:bg-gray-800 from <div[role='tablist'] button/> then add .bg-gray-300 .dark:bg-gray-800"
			>
				Advanced
			</button>
		</div>
		<div
			id="settings_bottom_tabs"
			class="btm-nav btm-nav-sm z-20 md:hidden"
			_="on click remove .active from <button/> in settings_bottom_tabs then add .active to event.srcElement"
		>
			if !data.IsAutologin {
				<button class="active" hx-get="/settings/tabs/profile" hx-target="#settings-tab-content">Profile</button>
			}
			<button class={ templ.KV("active", data.IsAutologin) } hx-get="/settings/tabs/recipes" hx-target="#settings-tab-content">Recipes</button>
			<button hx-get="/settings/tabs/advanced" hx-target="#settings-tab-content">Advanced</button>
		</div>
		<div id="settings-tab-content" role="tabpanel" class="w-[90vw] text-sm md:text-base p-4 auto-rows-min md:w-full">
			if data.IsAutologin {
				@SettingsTabsRecipes(data.Settings)
			} else {
				@SettingsTabsProfile(data)
			}
		</div>
	</div>
}

templ SettingsTabsAdvanced(data templates.SettingsData) {
	<div class="mb-2 md:grid md:grid-cols-2 md:gap-4">
		<p class="mb-1 font-semibold select-none md:text-end md:mb-0">Restore backup:</p>
		<form
			class="grid gap-1 grid-flow-col w-fit"
			hx-post="/settings/backups/restore"
			hx-include="select[name='date']"
			hx-swap="none"
			hx-indicator="#fullscreen-loader"
			hx-confirm="Continue with this backup? Today's data will be backed up if not already done."
		>
			<label>
				<select required id="file-type" name="date" class="select select-bordered select-sm">
					for _, b := range data.Backups {
						<option value={ b.Value } selected>{ b.Display }</option>
					}
				</select>
			</label>
			<button class="btn btn-sm btn-outline">
				@iconRocketLaunch()
			</button>
		</form>
	</div>
}

templ SettingsTabsRecipes(data templates.SettingsData) {
	<div class="mb-4 md:mb-2 md:grid md:grid-cols-2 md:gap-4">
		<p class="mb-1 font-semibold md:text-end">
			Export data:
			<br/>
			<span class="font-light text-sm">Download your recipes in the selected file format.</span>
		</p>
		<form class="grid gap-1 grid-flow-col w-fit" hx-get="/settings/export/recipes" hx-include="select[name='type']" hx-swap="none">
			<label class="form-control w-full max-w-xs">
				<select required id="file-type" name="type" class="w-fit select select-bordered select-sm">
					<optgroup label="Recipes">
						<option value="json" selected>JSON</option>
						<option value="pdf">PDF</option>
					</optgroup>
				</select>
			</label>
			<button class="btn btn-outline btn-sm">
				@iconDownload()
			</button>
		</form>
	</div>
	<div class="mb-4 md:mb-2 md:grid md:grid-cols-2 md:gap-4">
		<p class="mb-1 font-semibold md:text-end">Measurement system:</p>
		<label class="form-control w-full max-w-xs">
			<select name="system" hx-post="/settings/measurement-system" hx-swap="none" class="w-fit select select-bordered select-sm">
				for _, system := range data.MeasurementSystems {
					<option value={ system.String() } selected?={ system == data.UserSettings.MeasurementSystem }>{ system.String() }</option>
				}
			</select>
		</label>
	</div>
	<div class="flex mb-4 md:mb-2 md:grid md:grid-cols-2 md:gap-4">
		<label for="convert" class="mb-1 font-semibold md:text-end">
			Convert automatically:
			<br/>
			<span class="font-light text-sm">Convert new recipes to your preferred measurement system.</span>
		</label>
		<input
			type="checkbox"
			name="convert"
			id="convert"
			checked?={ data.UserSettings.ConvertAutomatically }
			class="checkbox"
			hx-post="/settings/convert-automatically"
			hx-trigger="click"
		/>
	</div>
	<div class="flex mb-4 md:mb-2 md:grid md:grid-cols-2 md:gap-4">
		<label for="calculate-nutrition" class="mb-1 font-semibold md:text-end">
			Calculate nutrition facts:
			<br/>
			<span class="font-light text-sm md:max-w-96 md:inline-block">
				Calculate the nutrition facts automatically when adding a recipe.
				The processing will be done in the background.
			</span>
		</label>
		<input
			id="calculate-nutrition"
			type="checkbox"
			name="calculate-nutrition"
			checked?={ data.UserSettings.CalculateNutritionFact }
			class="checkbox"
			hx-post="/settings/calculate-nutrition"
			hx-trigger="click"
		/>
	</div>
	<div class="md:grid md:grid-cols-2 md:gap-4">
		<label class="font-semibold md:text-end">
			Integrations:
			<br/>
			<span class="font-light text-sm">Import recipes from the selected solution.</span>
		</label>
		<div class="grid gap-1 grid-flow-col w-fit h-fit mt-1 md:mt-0">
			<label class="form-control w-full max-w-xs">
				<select name="integrations" class="w-fit select select-bordered select-sm">
					<option value="nextcloud" selected>Nextcloud</option>
				</select>
			</label>
			<button class="btn btn-outline btn-sm" onmousedown="integrations_nextcloud_dialog.showModal()">
				@iconDownload2()
			</button>
		</div>
	</div>
	<dialog id="integrations_nextcloud_dialog" class="modal">
		<div class="modal-box">
			<form method="dialog">
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
			</form>
			<h3 class="font-semibold underline text-center">Import from Nextcloud</h3>
			<form method="dialog" hx-post="/integrations/import/nextcloud" hx-swap="none" onsubmit="integrations_nextcloud_dialog.close()">
				<label class="form-control w-full">
					<div class="label">
						<span class="label-text font-medium">Nextcloud URL</span>
					</div>
					<input type="url" name="url" placeholder="https://nextcloud.mydomain.com" class="input input-bordered w-full" required/>
				</label>
				<label class="form-control w-full">
					<div class="label">
						<span class="label-text font-medium">Username</span>
					</div>
					<input type="text" name="username" placeholder="Enter your Nextcloud username" class="input input-bordered w-full" required/>
				</label>
				<label class="form-control w-full pb-2">
					<div class="label">
						<span class="label-text font-medium">Password</span>
					</div>
					<input type="password" name="password" placeholder="Enter your Nextcloud password" class="input input-bordered w-full" required/>
				</label>
				<button class="btn btn-block btn-primary btn-sm mt-2">Import</button>
			</form>
		</div>
	</dialog>
}

templ SettingsTabsProfile(data templates.SettingsData) {
	<div class="mb-4 md:mb-2 md:grid md:grid-cols-2 md:gap-4">
		<p class="mb-1 font-semibold md:text-end">Change password:</p>
		<div class="card card-bordered card-compact w-96 bg-base-100 max-w-xs">
			<div class="card-body pt-2">
				<form hx-post="/auth/change-password" hx-indicator="#fullscreen-loader" hx-swap="none">
					<label class="form-control w-full">
						<div class="label">
							<span class="label-text">Current password?</span>
						</div>
						<input
							type="password"
							placeholder="Enter current password"
							class="input input-bordered input-sm w-full max-w-xs"
							name="password-current"
							required
						/>
					</label>
					<label class="form-control w-full">
						<div class="label">
							<span class="label-text">New password?</span>
						</div>
						<input
							type="password"
							placeholder="Enter new password"
							class="input input-bordered input-sm w-full max-w-xs"
							name="password-new"
							required
						/>
					</label>
					<label class="form-control w-full">
						<div class="label">
							<span class="label-text">Confirm password?</span>
						</div>
						<input
							type="password"
							placeholder="Retype new password"
							class="input input-bordered input-sm w-full max-w-xs"
							name="password-confirm"
							required
						/>
					</label>
					<div type="submit" class="card-actions justify-end mt-2">
						<button class="btn btn-primary btn-block btn-sm">Update</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div class="flex mb-4 md:mb-2 md:grid md:grid-cols-2 md:gap-4">
        <label for="use-rtl" class="mb-1 font-semibold md:text-end">
            Switch to RTL:
            <br/>
            <span class="font-light text-sm md:max-w-96 md:inline-block">
                When checked, the UI will be displayed in RTL mode. Otherwise, LTR.
            </span>
        </label>
        <input
            id="use-rtl"
            type="checkbox"
            name="use-rtl"
            checked?={ data.UserSettings.IsRTL }
            class="checkbox"
            hx-post="/settings/use-rtl"
            hx-trigger="click"
        />
    </div>
	<div class="mb-2 grid grid-cols-2 gap-4">
		<p class="mb-1 font-semibold md:text-end">
			Delete Account:
			<br/>
			<span class="font-light text-sm">This will delete all your data.</span>
		</p>
		<button
			type="submit"
			hx-delete="/auth/user"
			hx-confirm="Are you sure you want to delete your account? This action is irreversible."
			class="btn btn-error w-28"
		>
			Delete
		</button>
	</div>
}
